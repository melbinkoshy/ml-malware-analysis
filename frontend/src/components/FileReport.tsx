import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Button } from "./ui/button";
import { Input } from "./ui/input";
import { useState } from "react";
import toast from "react-hot-toast";
import axios from "axios";
const FileReport = ({ reportData, file }) => {
  const [userFeedback, SetUserFeedback] = useState(null);
  const handleSubmit = async () => {
    try {
      const response = await axios.post(
        "http://127.0.0.1:8000/post-feedback/",
        { hash_value: reportData.hash, user_feedback: userFeedback }
      );
      toast.success("Updated the Feedback")
    } catch (error) {
      toast.error("Couldn't update feedback");
    }
  };
  console.log(userFeedback);
  const formData = new FormData();
  formData.append("file", file);
  console.log(file);
  const getVTReport = async () => {
    try {
      // Adjust the URL and headers as per your backend API's requirements

      const response = await axios.post(
        "http://127.0.0.1:8000/vt-scan/",
        formData,
        {
          headers: {
            "Content-Type": "multipart/form-data",
          },
        }
      );
      console.log(response);
      // Create a new Blob object containing the JSON data
      const blob = new Blob([JSON.stringify(response.data)], {
        type: "application/json",
      });
      const downloadUrl = window.URL.createObjectURL(blob);
      const link = document.createElement("a");
      link.href = downloadUrl;
      console.log("hello")
      // Set the download filename
      link.download = "download.json";
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link); // Remove the link when done

      // Optionally, clean up the URL object
      window.URL.revokeObjectURL(downloadUrl);

      toast.success("File downloaded successfully");
    } catch (e) {
      console.log(e);
    }
  };

  return (
    <div className="w-[800px]">
      <Card >
        <CardHeader>
          <CardTitle className="text-[#594157]">File Analysis Report</CardTitle>
          <CardDescription>Reported for your Uploaded File</CardDescription>
        </CardHeader>
        <CardContent>
          <div className="flex mb-2">
            <div className=" w-24 font-bold">Name:</div>
            <div>{reportData.name}</div>
          </div>
        </CardContent>
        <CardContent>
          <div className="flex mb-2">
            <div className="w-24 font-bold">Hash Value:</div>
            <div className="truncate max-w-[400px]">{reportData.hash}</div>
          </div>
        </CardContent>
        <CardContent>
          <div className="flex mb-2">
            <div className="w-24 font-bold">Features:</div>
            <div className="truncate max-w-[400px]">
              {JSON.stringify(reportData.features)}
            </div>
          </div>
        </CardContent>
        <CardContent>
          <div className="flex mb-2">
            <div className=" w-24 font-bold">Prediction:</div>
            <div>{reportData.prediction}</div>
          </div>
        </CardContent>
        <CardContent>
          <div className="flex justify-between items-center">
            <Button className="font-semibold text-white" onClick={getVTReport}>
              Detailed Analysis
            </Button>
            <div className="flex flex-col gap-2">
              <div className="text-center">
                Wrong Prediction? Give Feedback.
              </div>
              <div className="flex gap-2">
                {" "}
                <Input
                  type="number"
                  value={userFeedback}
                  onChange={(e) => {
                    SetUserFeedback(e.target.value);
                  }}
                />
                <Button onClick={handleSubmit}>Submit</Button>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default FileReport;
