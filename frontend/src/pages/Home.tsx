import axios from "axios";
import { useState} from "react";
import Navbar from "../components/Navbar";
import { FileUploader } from "react-drag-drop-files";
import FileReport from "@/components/FileReport";
import toast from "react-hot-toast";
import SpinnerCircular from "@/components/ui/SpinnerCircular";
import Footer from "@/components/Footer";

const predict = (value) => {
  switch (value) {
    case 0:
      return "Benign";
    case 1:
      return "RedLineStealer";
    case 2:
      return "Downloader";
    case 3:
      return "RAT";
    case 4:
      return "BankingTrojan";
    case 5:
      return "SnakeKeyLogger";
    case 6:
      return "Spyware";
  }
};

const Home = () => {
  const fileTypes = ["EXE"];
  const [selectedFile, setSelectedFile] = useState(null); // State to store the selected file
  const [response, setResponse] = useState(null);
  const [isLoading, setIsLoading] = useState(false);
  // Handler for file selection
  const handleFileChange = (event) => {
    setSelectedFile(event.target.files[0]);
  };
  // Handler for file upload
  const handleUpload = async () => {
    if (!selectedFile) {
      alert("Please select a file first.");
      return;
    }

    const formData = new FormData();
    formData.append("file", selectedFile); // The name 'file' should match with your backend API's expected field

    try {
      // Adjust the URL and headers as per your backend API's requirements
      setIsLoading(true);
      const response = await axios.post(
        "http://127.0.0.1:8000/scan/",
        formData,
        {
          headers: {
            "Content-Type": "multipart/form-data",
          },
        }
      );
      toast.success("File uploaded Successfully");
      toast.success(predict(response.data?.prediction));
      setResponse(response.data);
      // Optionally, you can set some state here to indicate a successful upload or reset the form
    } catch (error) {

      console.error("Error uploading file:", error.response.data.detail);
      toast.error(error.response.data.detail?"Exhausted your daily quota":"Error uploading/scanning the file");
      // Optionally, handle the error, e.g., set an error state, show a message, etc.
    } finally {
      setIsLoading(false);
    }
  };

  const handleChange = (file) => {
    setSelectedFile(file);
  };
  console.log(response);

  return (
    <div className="bg-[#f6f5f2] h-[100vh] bg-[url('https://images.unsplash.com/photo-1562505299-a92c9a1c4f37?q=80&w=1935&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D')] text-white bg-no-repeat bg-cover">
      <Navbar />
      <div className="flex items-center justify-center mb-10 ">
        <div className="flex flex-col justify-center items-center">
          {/* <div className="text-[70px] font-bold text-[#594157]">TRY IT YOURSELF</div> */}
          <p className="text-[40px] mt-10">
            Upload a file and get a detailed analysis for your files
          </p>
          <div className="mt-[100px] flex flex-col items-center justify-center gap-6">
            <FileUploader
              multiple={false}
              handleChange={handleChange}
              name="file"
              types={fileTypes}
              classes="text-white"
            />
            <div className="flex gap-4">
              <input
                hidden
                id="fileInput"
                type="file"
                onChange={handleFileChange}
                className="p-4"
              />
              <div className="flex justify-center items-center flex-col gap-4">
                <div>{selectedFile?.name}</div>
                <div className="space-x-6">

                <label
                  htmlFor="fileInput"
                  className="bg-transparent border border-white    font-bold py-2 px-4 rounded cursor-pointer text-white"
                >
                  Choose File
                </label>
                <button
                  onClick={handleUpload}
                  className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"
                >
                  Upload
                </button>
                </div>
              </div>
            </div>
          </div>
          <div className="mt-16">
            {isLoading ? (
              <SpinnerCircular />
            ) : response == null ? (
              <></>
            ) : (
              <FileReport reportData={response} file={selectedFile} />
            )}
          </div>
        </div>
      </div>
        

      {/* <Footer/> */}
    </div>
  );
};

export default Home;
